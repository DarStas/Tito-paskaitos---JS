1. Write a loop/cycle that makes seven calls to console.log to output the following triangle:
#
##
###
####
#####
######
#######

2. Write a function that uses console.log to print all the numbers from 1 to 100, with two exceptions.
For numbers divisible by 3, print "Fizz" instead of the nubmer,
and for numbers divisible by 5 (and not 3), print "Buzz" instead.

2.1 Once you have that working, modify your function to print "FizzBuzz" for members that are divisible by both 3 and 5 
( and still print "Fizz" or "Buzz" for numbers divisible by only one of those)

3. Write a range function that takes two arguments, start and end, and returns an array containing all the numbers from start up to 
(and including) end. for example: range(1, 3) // [1, 2, 3]

4. Arrays have a reverse method that changes the array by inverting the order in which its elements appear. For this exercise, 
write two functions, reverseArray and reverseArrayInPlace. The first, reverseArray, takes an array as argument and produces a new array 
that has the same elemens in the inverse order. The second, reverseArrayInPlace, does what the reverse method does: it modifies the array 
given as argument by reversing its elements. Neither may use the standard reverse method.

BONUS:
Write a function that creates a string that represents 8x8 grid, using new line characters to separate lines. At each position of 
the grid there is either a space or a # character. The characters should form a chessboard. Passing this string to console.log should 
show something like this:
  # # # #
 # # # # 
  # # # #
 # # # # 
  # # # #
 # # # # 
  # # # #
 # # # # 
 
 When you have function that generates this pattern, define a binding size = 8 and change the function so that it works for any size, 
 outputting a grid of the given width and height.